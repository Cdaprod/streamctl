#!/usr/bin/env bash

set -euo pipefail

SESSION="wfstream"
OUTPUT_MODE="${2:-hls}"
HLS_DIR="/dev/shm/hls"
HLS_PORT=8080
LOG_FILE="/tmp/streamctl.log"
HTTP_PID_FILE="/tmp/stream_http.pid"
STREAM_PID_FILE="/tmp/stream_video.pid"

# Detect active Wayland display
DISPLAY_ID=$(wlr-randr | awk '/Enabled: yes/{print prev}{prev=$1}' | head -n1)

start_hls() {
  mkdir -p "$HLS_DIR"
  echo "Starting HLS stream: http://$(hostname -I | awk '{print $1}'):$HLS_PORT/stream.m3u8"

  nohup bash -c "
    wf-recorder -o ${DISPLAY_ID} -x yuv420p -f - |
    ffmpeg -f matroska -i - \
      -c:v libx264 -preset ultrafast -tune zerolatency \
      -f hls -hls_time 2 -hls_list_size 5 -hls_flags delete_segments \
      -hls_segment_filename '${HLS_DIR}/stream_%03d.ts' \
      '${HLS_DIR}/stream.m3u8'
  " > "$LOG_FILE" 2>&1 & echo $! > "$STREAM_PID_FILE"

  nohup bash -c "cd ${HLS_DIR} && python3 -m http.server ${HLS_PORT}" > /dev/null 2>&1 & echo $! > "$HTTP_PID_FILE"
}

stop_stream() {
  [[ -f "$STREAM_PID_FILE" ]] && kill "$(cat "$STREAM_PID_FILE")" 2>/dev/null && rm "$STREAM_PID_FILE"
  [[ -f "$HTTP_PID_FILE" ]] && kill "$(cat "$HTTP_PID_FILE")" 2>/dev/null && rm "$HTTP_PID_FILE"
  echo "Stream stopped."
}

stream_status() {
  if [[ -f "$STREAM_PID_FILE" ]] && ps -p "$(cat "$STREAM_PID_FILE")" > /dev/null; then
    echo "✅ Video stream is running."
  else
    echo "❌ Video stream is not running."
  fi

  if [[ -f "$HTTP_PID_FILE" ]] && ps -p "$(cat "$HTTP_PID_FILE")" > /dev/null; then
    echo "✅ HTTP server is running on port $HLS_PORT."
  else
    echo "❌ HTTP server is not running."
  fi
}

case "$1" in
  start)
    stream_status | grep -q '✅' && echo "Stream already running." && exit 0
    start_hls
    ;;
  stop)
    stop_stream
    ;;
  status)
    stream_status
    ;;
  log)
    tail -f "$LOG_FILE"
    ;;
  *)
    echo "Usage: streamctl {start|stop|status|log} [hls]"
    ;;
esac
